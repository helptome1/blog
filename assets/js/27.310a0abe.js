(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{556:function(t,s,a){"use strict";a.r(s);var r=a(8),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("XSS网络攻击方式和区别")])]),a("h1",{attrs:{id:"xss-和-csrf-脚本攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-和-csrf-脚本攻击"}},[t._v("#")]),t._v(" XSS 和 CSRF 脚本攻击")]),t._v(" "),a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("协议号 - 域名 - 端口号 ，只有当这三个条件同时满足相同时，我们就称之为符合同源策略，同源策略也可以看做是一个协议。")]),t._v(" "),a("p",[t._v("同源策略主要表现在三个方面：")]),t._v(" "),a("ul",[a("li",[t._v("DOM：同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。")]),t._v(" "),a("li",[t._v("Web 数据：同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。")]),t._v(" "),a("li",[t._v("网络：同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。")])]),t._v(" "),a("h2",{attrs:{id:"xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击"}},[t._v("#")]),t._v(" XSS 攻击")]),t._v(" "),a("h3",{attrs:{id:"什么是-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-xss-攻击"}},[t._v("#")]),t._v(" 什么是 XSS 攻击")]),t._v(" "),a("p",[t._v("恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。")]),t._v(" "),a("h3",{attrs:{id:"xss-攻击的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击的影响"}},[t._v("#")]),t._v(" XSS 攻击的影响")]),t._v(" "),a("ul",[a("li",[t._v("修改 DOM,伪造页面，欺骗用户，获取账号密码等私密信息;")]),t._v(" "),a("li",[t._v("在内面内生成浮窗广告;")]),t._v(" "),a("li",[t._v("可以监听用户的行为,比如 addEventListener('keydown') // 监听用户的键盘敲击事件")]),t._v(" "),a("li",[t._v("窃取 cookie 信息")]),t._v(" "),a("li",[t._v("获取页面数据等")])]),t._v(" "),a("h3",{attrs:{id:"攻击方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式"}},[t._v("#")]),t._v(" 攻击方式：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("存储型 XSS 攻击")]),t._v("：存储到 DB 后读取时注入恶意脚本，比如在一些评论区或者个性签名等可以自由编写的地方，在评论的时候写一段 script 脚本，这样数据就会被保存到数据库，当别人访问时，加载这段评论时，浏览器就会识别为一段 javascript 脚本代码来执行，并且只要不删除，就一直在，危害较大。")]),t._v(" "),a("li",[a("strong",[t._v("反射型 XSS 攻击")]),t._v("：是通过 URL 参数直接注入，一般是使用 alert 来探测站点是否防御，直接攻击的使用 src 来引入自己的脚本。/?xss="),a("scirpt",[t._v("...")])],1),t._v(" "),a("li",[a("strong",[t._v("基于 DOM 的 XSS 攻击")]),t._v(" --- 网络劫持，修改页面后，再让用户看到。")])]),t._v(" "),a("h3",{attrs:{id:"xss-防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-防御"}},[t._v("#")]),t._v(" XSS 防御:")]),t._v(" "),a("ol",[a("li",[t._v("在服务端将 script 标签转义掉.(服务器对输入的脚本进行过滤或转码)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在返回数据给到浏览器去渲染的时候，我们先将数据交给转义函数处理一下数据")]),t._v("\n\nres"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" xss"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("充分使用 CSP (限制加载其他域下的资源文件、禁止向第三方提交数据)\n内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。")])]),t._v(" "),a("li",[a("p",[t._v("cookie 设置 - HttpOnly (设置这个属性之后 cookie 无法通过 js 去 document.cookie 读取)")])])]),t._v(" "),a("h2",{attrs:{id:"csrf-跨站点请求伪造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨站点请求伪造"}},[t._v("#")]),t._v(" CSRF 跨站点请求伪造")]),t._v(" "),a("h3",{attrs:{id:"什么是-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-csrf"}},[t._v("#")]),t._v(" 什么是 CSRF")]),t._v(" "),a("p",[t._v("跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。如:攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),a("h3",{attrs:{id:"攻击方式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式-2"}},[t._v("#")]),t._v(" 攻击方式")]),t._v(" "),a("ul",[a("li",[t._v("GET 类型的 CSRF")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw?amount=10000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("p",[t._v("在受害者访问含有这个 img 的页面后，浏览器会自动向"),a("code",[t._v("http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker")]),t._v("发出一次 HTTP 请求。"),a("code",[t._v("bank.example")]),t._v("就会收到包含受害者登录信息的一次跨域请求。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("POST 类型的 CSRF\n通常是一种自提交表单的方式。访问该页面后，表单会自动提交，相当于模拟用户完成了一次 POST 操作。")])]),t._v(" "),a("li",[a("p",[t._v("链接类型的 CSRF\n链接类型的 CSRF 并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击.")])])]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),a("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),a("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),a("li",[t._v("跨站请求可以用各种方式：图片 URL、超链接、CORS、Form 提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),t._v(" "),a("h3",{attrs:{id:"防御策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防御策略"}},[t._v("#")]),t._v(" 防御策略：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("验证码；强制用户必须与应用进行交互，才能完成最终请求。此种方式能很好的遏制 csrf，但是用户体验比较差。")])]),t._v(" "),a("li",[a("p",[t._v("token；token 验证的 CSRF 防御机制是公认最合适的方案。(具体可以查看本系列前端鉴权中对 token 有详细描述)若网站同时存在 XSS 漏洞的时候，这个方法也是空谈。")])]),t._v(" "),a("li",[a("p",[t._v("Referer check；请求来源限制，此种方法成本最低，但是并不能保证 100% 有效，因为服务器并不是什么时候都能取到 Referer，而且低版本的浏览器存在伪造 Referer 的风险。")])])]),t._v(" "),a("h2",{attrs:{id:"xss-和-csrf-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-和-csrf-的区别"}},[t._v("#")]),t._v(" XSS 和 CSRF 的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("通常来说 CSRF 是由 XSS 实现的，CSRF 时常也被称为 XSRF（CSRF 实现的方式还可以是直接通过命令行发起请求等）。")])]),t._v(" "),a("li",[a("p",[t._v("本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。 XSS 是内容没有过滤导致浏览器将攻击者的输入当代码执行。")])]),t._v(" "),a("li",[a("p",[t._v("CSRF 则是因为浏览器在发送 HTTP 请求时候自动带上 cookie，而一般网站的 session 都存在 cookie 里面(Token 验证可以避免)。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);